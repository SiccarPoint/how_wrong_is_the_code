# Dakota input file, uses a moving average approach with a finer scale,
# combined with a second calibration term based on the std of bug find
# rates when at low commits (when there is much scatter, and we know N0
# controls this scatter), i.e., the first exploits the shape and the
# second exploits the distribution of the response.

# This version iterates on 3 by asking for a more discretised fit to scatter
# across the sampled space

# This attempts another EGO method, with better knowledge of the problem
# This iteration returns to just fitting the means, not the stds.

environment
  tabular_data
    tabular_data_file "dakota_ego4.dat"

method
  efficient_global

model
  single

variables
  continuous_design 3
  descriptors "R" "S" "F"
  lower_bounds 0.001 0.001 0.001
  upper_bounds 0.5 1 0.25
  initial_point 0.1 0.5 0.1

interface
  fork
    asynchronous
    evaluation_concurrency 4
    parameters_file "params.in"
    results_file "results.out"
    copy_files "template_dir/*"

    analysis_driver "python model_command_line_driver_ego4.py"

    work_directory
      named "EGO4/run"
      directory_tag
      directory_save
      file_save

responses
  calibration_terms 1
  response_descriptors "rmse"
  no_gradients
  no_hessians
